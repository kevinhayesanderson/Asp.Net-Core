To set which environment our application runs on, 
we need to set up the ASPNETCORE_ENVIRONMENT environment variable.

set the variable through the command prompt by typing set ASPNETCORE_ENVIRONMENT=Production in Windows 
or export ASPNET_CORE_ENVIRONMENT=Production in Linux.

SET ASPNETCORE_ENVIRONMENT=Production
echo %ASPNETCORE_ENVIRONMENT%

Order of Registering middleware components:
ExceptionHandler //register early, so it could catch all the exceptions in the later stages
HSTS
HttpsRedirection
Static Files
Routing
CORS
Authentication
Authorization
Custom Middlewares
Endpoint Configuration

Onion architecture:
4 layers:
• Domain Layer (Contracts project)
• Service Layer (Service.Contracts project and Service project)
• Infrastructure Layer
• Presentation Layer
The flow of dependencies is towards the core of the Onion.
The deeper the layer resides inside the Onion, the fewer dependencies it has.
Domain layer does not have any direct dependencies
outer layers are all allowed to reference the layers that are directly below them

navigational properties in Entities:
these properties serve the purpose of defining the relationship between our models.

Controllers:
Controllers should only be responsible for handling requests, model validation, 
and returning responses to the frontend or some HTTP client. 

Keeping business logic away from controllers is a good way to keep them lightweight, 
and our code more readable and maintainable.

Web API routing routes incoming HTTP requests to the particular action method inside the Web API controller. 
As soon as we send our HTTP request, the MVC framework parses that request and tries to match it to an action in the controller. 
There are two ways to implement routing in the project:
• Convention-based routing and
• Attribute routing

Convention-based routing is called such because it establishes a convention for the URL paths.
	Found in MVC project, needs app.UseRouting to add routing middleware

	app.MapControllerRoute(
	name: "default",
	pattern: "{controller=Home}/{action=Index}/{id?}");

	The first part creates the mapping for the controller name, 
	the second part creates the mapping for the action method, 
	third part is used for the optional parameter.

Attribute routing
	we place the base route above the controller class
	the ASP.NET Core team suggests that we shouldn’t use Convention-based Routing, but Attribute routing instead.
	Different actions can be executed on the resource with the same URI, but with different HTTP Methods.
	
	The resource name in the URI should always be a noun and not an action.
	create this route: api/companies and not this one: /api/getCompanies
	
	the hierarchy between our resources
	/api/principalResource/{principalId}/dependentResource
	/api/companies/{companyId}/employees
	
The IActionResult interface supports using a variety of methods, 
which return not only the result but also the status codes.

DTO:
A data transfer object (DTO) is an object that we use to transport data between the client and server applications.
EF Core uses model classes to map them to the tables in the database and that is the main purpose of a model class.
our models have navigational properties and sometimes we don’t want to map them in an API response.
we can use DTO to remove any property or concatenate properties into a single property.
Change in DB or model, the result will be same by using DTO

Global Error Handling:
Handling errors globally with Built-In Middleware.
The UseExceptionHandler middleware is a built-in middleware that we can use to handle exceptions.


Method Safety:
method a safe one if it doesn’t change the resource representation.

Method Idempotency:
If we can call a method multiple times with the same result, we can consider that method idempotent. 
the side effects of calling it once are the same as calling it multiple times.

HTTP Method		Is it Safe?		Is it Idempotent? 
GET				Yes				Yes
OPTIONS			Yes				Yes 
HEAD			Yes				Yes
POST			No				No 
DELETE			No				Yes
PUT				No				Yes 
PATCH			No				No

[ApiController] attribute is applied to a controller class to enable the following opinionated, 
API-specific behaviors:
• Attribute routing requirement
• Automatic HTTP 400 responses
• Binding source parameter inference
• Multipart/form-data request inference
• Problem details for error status codes

PATCH:
to fully update our resource, we should use PUT .
to update our resource only partially, we should use PATCH.
Microsoft.AspNetCore.JsonPatch library : usage of JsonPatchDocument in our controller
Microsoft.AspNetCore.Mvc.NewtonsoftJson library : request body conversion to a PatchDocument

request body: [FromBody]JsonPatchDocument<Company>
request media type: application/json-patch+json

[ { "op": "replace", "path": "/name", "value": "new name" }, { "op": "remove", "path": "/name" } ]
array of operations
operations in curly brackets
operations represented by op property
path property represents the object's property that we want to modify
value property represents a new value

Add: { "op": "add", "path": "/name", "value": "new value" } 
Assigns a new value to a required property.

Remove: { "op": "remove", "path": "/name" }
Sets a default value to a required property.

Replace: { "op": "replace", "path": "/name", "value": "new value" } 
Replaces a value of a required property to a new value.

Copy: { "op": "copy", "from": "/name", "path": "/title" }
Copies the value from a property in the “from” part to the property in the “path” part.

Move: { "op": "move", "from": "/name", "path": "/title" } 
Moves the value from a property in the “from” part to a property in the “path” part.

Test: { "op": "test", "path": "/name", "value": "new value" }
Tests if a property has a specified value.


Validation:
validate against validation rules applied by Data Annotation attributes, 
we are going to use the concept of ModelState.
It is a dictionary containing the state of the model and model binding validation.
model validation occurs after model binding and reports errors where the data, sent from the client.
Both model validation and data binding occur before our request reaches an action inside a controller.
ModelState.IsValid expression to check for those validation rules.
The response status code, when validation fails, should be 422 Unprocessable Entity.

Built-in Attributes:
https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-5.0
[ValidateNever] 
Indicates that property or parameter should be excluded from validation.

[Compare]
We use it for the properties comparison. 

[EmailAddress] 
Validates the email format of the property.

[Phone]
Validates the phone format of the property. 

[Range] 
Validates that the property falls within a specified range.

[RegularExpression] 
Validates that the property value matches a specified regular expression. 

[Required] 
We use it to prevent a null value for the property.

[StringLength]
Validates that a string property value doesn't exceed a specified length limit.


JWT:
setx SECRET "CodeMazeSecretKey" /M
setx SECRET1 "KevinHayesAnderson1995SecretKey1" /M

This is going to create a system environment variable with the name SECRET and the value CodeMazeSecretKey. 
By using /M we specify that we want a system variable and not local.


IOptionsSnapshot and IOptionsMonitor:
the main difference between these two interfaces is that the IOptionsSnapshot service is registered as a scoped service and thus can’t be injected inside the singleton service. 
On the other hand, IOptionsMonitor is registered as a singleton service and can be injected into any service lifetime.